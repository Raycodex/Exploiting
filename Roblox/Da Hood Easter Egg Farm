repeat task.wait() until game:IsLoaded()

--// Variables \\--

local PossibleEggNames = {"Egg1", "Egg2", "Egg3", "Egg4", "Egg5"}

local Player = game:GetService("Players").LocalPlayer
local Character = Player.Character

--// Functions \\--

local function initEggCollection(character)
	character:WaitForChild("FULLY_LOADED_CHAR", 20)
	for i,v in next, workspace.Ignored:GetChildren() do
		if table.find(PossibleEggNames, v.Name) then
			v.CFrame = Character.HumanoidRootPart.CFrame
		end
	end
	if syn then
		syn.queue_on_teleport("loadstring(game:HttpGet(('https://raw.githubusercontent.com/Raycodex/Exploiting/main/Roblox/Da%20Hood%20Easter%20Egg%20Farm')))()")
	else
		queue_on_teleport("loadstring(game:HttpGet(('https://raw.githubusercontent.com/Raycodex/Exploiting/main/Roblox/Da%20Hood%20Easter%20Egg%20Farm')))()")
	end
	
	local GameServers = {}
	
	for i, v in next, game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")).data do
		if type(v) == "table" and v.maxPlayers > v.playing and v.id ~= game.JobId and v.maxPlayers-10 < v.playing then
			GameServers[#GameServers + 1] = v.id
		end
	end
	
	game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, GameServers[math.random(1, #GameServers)])
end

--// Main \\--

if Character then
	initEggCollection(Character)
else
	Player.CharacterAdded:Connect(function(addedCharacter)
		initEggCollection(addedCharacter)
	end)
end
